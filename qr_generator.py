import qrcode
from PIL import Image

def generate_qr(data, fill_color="black", back_color="white", logo_path=None, box_size=10, output_file="qr_code.png"):
    """
    T·∫°o m√£ QR v·ªõi t√πy ch·ªçn m√†u s·∫Øc, logo, k√≠ch c·ª°.

    Generate a QR code with customizable colors, logo, and size.

    :param data: D·ªØ li·ªáu (URL ho·∫∑c vƒÉn b·∫£n) c·∫ßn m√£ h√≥a / Data (URL or text) to encode.
    :param fill_color: M√†u m√£ QR / QR code color.
    :param back_color: M√†u n·ªÅn m√£ QR / Background color.
    :param logo_path: ƒê∆∞·ªùng d·∫´n ƒë·∫øn file logo (n·∫øu c√≥) / Path to the logo file (if any).
    :param box_size: K√≠ch c·ª° √¥ vu√¥ng trong m√£ QR / Size of QR code blocks.
    :param output_file: T√™n file ƒë·∫ßu ra / Output file name.
    """
    qr = qrcode.QRCode(
        version=1,
        error_correction=qrcode.constants.ERROR_CORRECT_H,
        box_size=box_size,
        border=4,
    )
    qr.add_data(data)
    qr.make(fit=True)

    # T·∫°o h√¨nh ·∫£nh m√£ QR v·ªõi m√†u s·∫Øc t√πy ch·ªânh / Create QR code image with custom colors
    img = qr.make_image(fill_color=fill_color, back_color=back_color).convert('RGB')

    # Th√™m logo (n·∫øu c√≥) / Add logo (if any)
    if logo_path:
        try:
            logo = Image.open(logo_path)
            # ƒêi·ªÅu ch·ªânh k√≠ch c·ª° logo ƒë·ªÉ v·ª´a v·ªõi m√£ QR / Resize logo to fit in the QR code
            base_width = img.size[0] // 4
            logo.thumbnail((base_width, base_width))

            # V·ªã tr√≠ d√°n logo (gi·ªØa m√£ QR) / Position logo in the center of the QR code
            logo_pos = (
                (img.size[0] - logo.size[0]) // 2,
                (img.size[1] - logo.size[1]) // 2,
            )
            img.paste(logo, logo_pos, mask=logo if logo.mode == 'RGBA' else None)
        except Exception as e:
            print(f"‚ö†Ô∏è Kh√¥ng th·ªÉ th√™m logo / Unable to add logo: {e}")

    # L∆∞u file / Save the file
    img.save(output_file)
    print(f"‚úÖ M√£ QR ƒë√£ ƒë∆∞·ª£c l∆∞u t·∫°i: {output_file} / QR code saved to: {output_file}")

if __name__ == "__main__":
    # Nh·∫≠p d·ªØ li·ªáu t·ª´ ng∆∞·ªùi d√πng / Input data from the user
    data = input("üîó Nh·∫≠p d·ªØ li·ªáu (URL ho·∫∑c vƒÉn b·∫£n) ƒë·ªÉ t·∫°o m√£ QR:\nEnter data (URL or text) to generate QR: ")

    fill_color = input("üé® Nh·∫≠p m√†u m√£ QR (v√≠ d·ª•: black, #000000, red):\nEnter QR code color (e.g., black, #000000, red): ") or "black"
    back_color = input("üé® Nh·∫≠p m√†u n·ªÅn m√£ QR (v√≠ d·ª•: white, #FFFFFF, yellow):\nEnter background color of QR (e.g., white, #FFFFFF, yellow): ") or "white"

    logo_path = input("üñºÔ∏è Nh·∫≠p ƒë∆∞·ªùng d·∫´n t·ªõi file logo (ho·∫∑c ƒë·ªÉ tr·ªëng n·∫øu kh√¥ng d√πng):\nEnter path to logo file (or leave blank if none): ")
    box_size = input("üìè Nh·∫≠p k√≠ch c·ª° √¥ vu√¥ng (v√≠ d·ª•: 10, 15):\nEnter QR code block size (e.g., 10, 15): ") or "10"

    try:
        box_size = int(box_size)
        output_file = input("üíæ Nh·∫≠p t√™n file ƒë·∫ßu ra (m·∫∑c ƒë·ªãnh: qr_code.png):\nEnter output file name (default: qr_code.png): ") or "qr_code.png"

        # T·∫°o m√£ QR / Generate QR code
        generate_qr(data, fill_color, back_color, logo_path, box_size, output_file)
    except ValueError:
        print("‚ö†Ô∏è K√≠ch c·ª° √¥ vu√¥ng ph·∫£i l√† m·ªôt s·ªë nguy√™n / Block size must be an integer!")
